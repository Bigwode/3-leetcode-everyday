所谓让人纠结的，更可能是不敢迈出那一步吧。
==============================================================
Python直接赋值、浅拷贝和深拷贝总结
==============================================================
b=a;  # 直接赋值,传的是对象的引用，地址相同。

如果是可变对象（如列表字典），则可以修改对象的原始值；
如果是不可变对象（整型浮点型字符元组），就不能修改原始对象。
--------------------------------------------------------------
c = copy.copy(a)　 # 浅拷贝,地址不同，只修改已有的子对象

浅拷贝拷贝的对象其值若包含可变对象，这些可变对象仍是原始对象中的引用。
因此浅拷贝产生的新对象中可变对象的值在发生改变时会对原对象的值产生副作用，
因为这些值是同一个引用。
因此使用浅拷贝的典型使用场景是：对象自身发生改变的同时需要保持对象中的值完全相同，比如 list 排序。
--------------------------------------------------------------
d = copy.deepcopy(a)  # 深拷贝，地址不同，不修改里面包含的所有对象的内容。

深拷贝是拷贝的对象本身，而不只是引用。
它会递归查找对象中包含的其他对象的引用，来完成更深层次拷贝。
因此，深拷贝产生的副本可以随意修改而不需要担心会引起原始值的改变。
	
参考资料：
[1]、https://wecatch.me/blog/2016/06/18/python-copy-deepcopy/
